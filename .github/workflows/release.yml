name: release
on:
  push:
    tags:
      - "*"

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.init.outputs.release-version }}
    steps:
      - id: init
        run: echo "release-version=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    needs: init
    env:
      STAGING: remindee-bot-${{ needs.init.outputs.release-version }}-${{ matrix.target }}
      BINARY_PATH: target/${{ matrix.target }}/release/${{ matrix.binary }}
    strategy:
      matrix:
        build: [linux, macos-x86_64, macos-aarch64, armv7, windows]
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: remindee-bot

          - build: macos-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            binary: remindee-bot

          - build: macos-aarch64
            os: macos-latest
            target: aarch64-apple-darwin
            binary: remindee-bot

          - build: armv7
            os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            binary: remindee-bot

          - build: windows
            os: ubuntu-latest
            target: x86_64-pc-windows-gnu
            binary: remindee-bot.exe
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Setup cross
        run: |
          cargo install cross

      - name: Build release binary
        run: cross build --verbose --release --target ${{ matrix.target }}

      - name: Strip release binary
        if: ${{ matrix.build != 'armv7' && matrix.build != 'windows' }}
        run: strip ${{ env.BINARY_PATH }}

      - name: Strip ARM release binary
        if: ${{ matrix.build == 'armv7' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y binutils-arm-linux-gnueabihf
          arm-linux-gnueabihf-strip ${{ env.BINARY_PATH }}

      - name: Build archive
        shell: bash
        run: |
          mkdir ${{ env.STAGING }}

          cp ${{ env.BINARY_PATH }} ${{ env.STAGING }}/
          tar czf ${{ env.STAGING }}.tar.gz ${{ env.STAGING }}/

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.STAGING }}
          path: ${{ env.STAGING }}.tar.gz

  create-release:
    name: create-release
    needs: [init, build-release]
    runs-on: ubuntu-latest
    env:
      PREFIX: remindee-bot-${{ needs.init.outputs.release-version }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.PREFIX }}-x86_64-unknown-linux-gnu
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.PREFIX }}-x86_64-apple-darwin
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.PREFIX }}-aarch64-apple-darwin
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.PREFIX }}-armv7-unknown-linux-gnueabihf
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.PREFIX }}-x86_64-pc-windows-gnu

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.PREFIX }}-x86_64-unknown-linux-gnu.tar.gz
            ${{ env.PREFIX }}-x86_64-apple-darwin.tar.gz
            ${{ env.PREFIX }}-aarch64-apple-darwin.tar.gz
            ${{ env.PREFIX }}-armv7-unknown-linux-gnueabihf.tar.gz
            ${{ env.PREFIX }}-x86_64-pc-windows-gnu.tar.gz

  publish-crate:
    name: Publish tagged release on crates.io
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
